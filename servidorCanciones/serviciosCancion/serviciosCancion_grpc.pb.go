// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: serviciosCancion.proto

package serviciosCancion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiciosCanciones_BuscarCancion_FullMethodName            = "/servicios.serviciosCanciones/BuscarCancion"
	ServiciosCanciones_ObtenerDetalleCancion_FullMethodName    = "/servicios.serviciosCanciones/ObtenerDetalleCancion"
	ServiciosCanciones_ListarGeneros_FullMethodName            = "/servicios.serviciosCanciones/ListarGeneros"
	ServiciosCanciones_ListarCancionesPorGenero_FullMethodName = "/servicios.serviciosCanciones/ListarCancionesPorGenero"
	ServiciosCanciones_BuscarGenero_FullMethodName             = "/servicios.serviciosCanciones/BuscarGenero"
)

// ServiciosCancionesClient is the client API for ServiciosCanciones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiciosCancionesClient interface {
	BuscarCancion(ctx context.Context, in *PeticionCancionDTO, opts ...grpc.CallOption) (*RespuestaCancionDTO, error)
	ObtenerDetalleCancion(ctx context.Context, in *IdCancion, opts ...grpc.CallOption) (*DetalleCancion, error)
	ListarGeneros(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaGeneros, error)
	ListarCancionesPorGenero(ctx context.Context, in *IdGenero, opts ...grpc.CallOption) (*ListaCanciones, error)
	BuscarGenero(ctx context.Context, in *PeticionGeneroID, opts ...grpc.CallOption) (*RespuestaGeneroDTO, error)
}

type serviciosCancionesClient struct {
	cc grpc.ClientConnInterface
}

func NewServiciosCancionesClient(cc grpc.ClientConnInterface) ServiciosCancionesClient {
	return &serviciosCancionesClient{cc}
}

func (c *serviciosCancionesClient) BuscarCancion(ctx context.Context, in *PeticionCancionDTO, opts ...grpc.CallOption) (*RespuestaCancionDTO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaCancionDTO)
	err := c.cc.Invoke(ctx, ServiciosCanciones_BuscarCancion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviciosCancionesClient) ObtenerDetalleCancion(ctx context.Context, in *IdCancion, opts ...grpc.CallOption) (*DetalleCancion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetalleCancion)
	err := c.cc.Invoke(ctx, ServiciosCanciones_ObtenerDetalleCancion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviciosCancionesClient) ListarGeneros(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (*ListaGeneros, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaGeneros)
	err := c.cc.Invoke(ctx, ServiciosCanciones_ListarGeneros_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviciosCancionesClient) ListarCancionesPorGenero(ctx context.Context, in *IdGenero, opts ...grpc.CallOption) (*ListaCanciones, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaCanciones)
	err := c.cc.Invoke(ctx, ServiciosCanciones_ListarCancionesPorGenero_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviciosCancionesClient) BuscarGenero(ctx context.Context, in *PeticionGeneroID, opts ...grpc.CallOption) (*RespuestaGeneroDTO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaGeneroDTO)
	err := c.cc.Invoke(ctx, ServiciosCanciones_BuscarGenero_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiciosCancionesServer is the server API for ServiciosCanciones service.
// All implementations must embed UnimplementedServiciosCancionesServer
// for forward compatibility.
type ServiciosCancionesServer interface {
	BuscarCancion(context.Context, *PeticionCancionDTO) (*RespuestaCancionDTO, error)
	ObtenerDetalleCancion(context.Context, *IdCancion) (*DetalleCancion, error)
	ListarGeneros(context.Context, *Vacio) (*ListaGeneros, error)
	ListarCancionesPorGenero(context.Context, *IdGenero) (*ListaCanciones, error)
	BuscarGenero(context.Context, *PeticionGeneroID) (*RespuestaGeneroDTO, error)
	mustEmbedUnimplementedServiciosCancionesServer()
}

// UnimplementedServiciosCancionesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiciosCancionesServer struct{}

func (UnimplementedServiciosCancionesServer) BuscarCancion(context.Context, *PeticionCancionDTO) (*RespuestaCancionDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuscarCancion not implemented")
}
func (UnimplementedServiciosCancionesServer) ObtenerDetalleCancion(context.Context, *IdCancion) (*DetalleCancion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerDetalleCancion not implemented")
}
func (UnimplementedServiciosCancionesServer) ListarGeneros(context.Context, *Vacio) (*ListaGeneros, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarGeneros not implemented")
}
func (UnimplementedServiciosCancionesServer) ListarCancionesPorGenero(context.Context, *IdGenero) (*ListaCanciones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListarCancionesPorGenero not implemented")
}
func (UnimplementedServiciosCancionesServer) BuscarGenero(context.Context, *PeticionGeneroID) (*RespuestaGeneroDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuscarGenero not implemented")
}
func (UnimplementedServiciosCancionesServer) mustEmbedUnimplementedServiciosCancionesServer() {}
func (UnimplementedServiciosCancionesServer) testEmbeddedByValue()                            {}

// UnsafeServiciosCancionesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiciosCancionesServer will
// result in compilation errors.
type UnsafeServiciosCancionesServer interface {
	mustEmbedUnimplementedServiciosCancionesServer()
}

func RegisterServiciosCancionesServer(s grpc.ServiceRegistrar, srv ServiciosCancionesServer) {
	// If the following call pancis, it indicates UnimplementedServiciosCancionesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiciosCanciones_ServiceDesc, srv)
}

func _ServiciosCanciones_BuscarCancion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeticionCancionDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiciosCancionesServer).BuscarCancion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiciosCanciones_BuscarCancion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiciosCancionesServer).BuscarCancion(ctx, req.(*PeticionCancionDTO))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiciosCanciones_ObtenerDetalleCancion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdCancion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiciosCancionesServer).ObtenerDetalleCancion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiciosCanciones_ObtenerDetalleCancion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiciosCancionesServer).ObtenerDetalleCancion(ctx, req.(*IdCancion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiciosCanciones_ListarGeneros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiciosCancionesServer).ListarGeneros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiciosCanciones_ListarGeneros_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiciosCancionesServer).ListarGeneros(ctx, req.(*Vacio))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiciosCanciones_ListarCancionesPorGenero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdGenero)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiciosCancionesServer).ListarCancionesPorGenero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiciosCanciones_ListarCancionesPorGenero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiciosCancionesServer).ListarCancionesPorGenero(ctx, req.(*IdGenero))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiciosCanciones_BuscarGenero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeticionGeneroID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiciosCancionesServer).BuscarGenero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiciosCanciones_BuscarGenero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiciosCancionesServer).BuscarGenero(ctx, req.(*PeticionGeneroID))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiciosCanciones_ServiceDesc is the grpc.ServiceDesc for ServiciosCanciones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiciosCanciones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicios.serviciosCanciones",
	HandlerType: (*ServiciosCancionesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuscarCancion",
			Handler:    _ServiciosCanciones_BuscarCancion_Handler,
		},
		{
			MethodName: "ObtenerDetalleCancion",
			Handler:    _ServiciosCanciones_ObtenerDetalleCancion_Handler,
		},
		{
			MethodName: "ListarGeneros",
			Handler:    _ServiciosCanciones_ListarGeneros_Handler,
		},
		{
			MethodName: "ListarCancionesPorGenero",
			Handler:    _ServiciosCanciones_ListarCancionesPorGenero_Handler,
		},
		{
			MethodName: "BuscarGenero",
			Handler:    _ServiciosCanciones_BuscarGenero_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviciosCancion.proto",
}
